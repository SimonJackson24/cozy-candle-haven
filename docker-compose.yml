version: "3.8"

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: medusa
      POSTGRES_PASSWORD: medusa
      POSTGRES_DB: medusa
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - medusa-network

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    networks:
      - medusa-network

  medusa:
    image: node:20-alpine
    working_dir: /app/medusa
    volumes:
      - ./medusa-data:/app/medusa
    ports:
      - "9000:9000"
    environment:
      DATABASE_URL: postgres://medusa:medusa@postgres:5432/medusa
      REDIS_URL: redis://redis:6379
      NODE_ENV: development
      JWT_SECRET: your-super-secret-jwt-key
      COOKIE_SECRET: your-super-secret-cookie-key
      PORT: 9000
      STORE_CORS: http://192.168.0.27:8080
      ADMIN_CORS: http://192.168.0.27:9000
    command: >
      sh -c "
        if [ ! -f package.json ]; then
          mkdir -p temp-store &&
          cd temp-store &&
          npx create-medusa-app@latest . --seed --db-url=postgres://medusa:medusa@postgres:5432/medusa &&
          cd .. &&
          cp -r temp-store/* . &&
          cp -r temp-store/.* . 2>/dev/null || true &&
          rm -rf temp-store
        fi &&
        npm install &&
        npm run dev"
    depends_on:
      - postgres
      - redis
    networks:
      - medusa-network

  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - VITE_MEDUSA_BACKEND_URL=http://192.168.0.27:9000
      - HOST=0.0.0.0
    depends_on:
      - medusa
    networks:
      - medusa-network

volumes:
  postgres_data:

networks:
  medusa-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16